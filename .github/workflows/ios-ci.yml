name: iOS CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-and-test:
    runs-on: macos-14     # or macos-15 if your org has it
    steps:
      - uses: actions/checkout@v4
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'   # use latest available 16.x version
      - name: Install jq (for device picking)
        run: brew install jq
      - name: Show Xcode & Simulators
        run: |
          xcodebuild -version
          xcodebuild -showsdks
          xcrun simctl list devices
          xcrun simctl list runtimes | grep iOS
      - name: Pick an available iPhone simulator and iOS version
        id: pick
        shell: bash
        run: |
          # Get available iOS versions
          ios_version=$(xcrun simctl list runtimes --json | jq -r '.runtimes[] | select(.name | contains("iOS")) | select(.isAvailable == true) | .version' | sort -V | tail -1)
          echo "Available iOS version: $ios_version"
          
          # Get available iPhone simulators
          json=$(xcrun simctl list devices --json)
          device_name=$(echo "$json" | jq -r '
            .devices | to_entries[].value[]
            | select(.isAvailable == true)
            | .name
          ' | grep -E "iPhone 1(5|4)|iPhone SE|iPhone" | head -n1)
          
          if [ -z "$device_name" ]; then
            echo "No iPhone simulator found"; exit 1
          fi
          if [ -z "$ios_version" ]; then
            echo "No iOS runtime found"; exit 1
          fi
          
          echo "device=$device_name" >> "$GITHUB_OUTPUT"
          echo "ios_version=$ios_version" >> "$GITHUB_OUTPUT"
          echo "Picked device: $device_name"
          echo "Picked iOS version: $ios_version"
      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-
      - name: Build & Test (Simulator)
        run: |
          set -o pipefail
          xcodebuild \
            -project RickMortyLLM.xcodeproj \
            -scheme RickMortyLLM \
            -destination "platform=iOS Simulator,OS=${{ steps.pick.outputs.ios_version }},name=${{ steps.pick.outputs.device }}" \
            -derivedDataPath DerivedData \
            -skipPackagePluginValidation \
            -parallel-testing-enabled YES \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            clean test
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults.xcresult
          path: TestResults.xcresult