name: iOS CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install jq
        run: brew install jq

      - name: Show Xcode & Simulators
        run: |
          xcodebuild -version
          xcrun simctl list devices --json | jq '.devices | with_entries(.value |= map(select(.isAvailable == true)))' | jq -r '.devices | to_entries[] | "\(.key): \(.value | length) available"'
          xcodebuild -project RickMortyLLM.xcodeproj -scheme RickMortyLLM -showdestinations || true

      - name: Pick an available iPhone simulator (by UDID)
        id: pick
        shell: bash
        run: |
          json=$(xcrun simctl list devices --json)
          # Prefer newest iPhone family; fall back to any available iPhone
          udid=$(echo "$json" | jq -r '
            .devices | to_entries[].value[]
            | select(.isAvailable == true)
            | select(.name | startswith("iPhone"))
            | .udid
          ' | head -n1)

          if [ -z "$udid" ]; then
            echo "No available iPhone simulator found"; exit 1
          fi

          name=$(echo "$json" | jq -r ".devices | to_entries[].value[] | select(.udid==\"$udid\") | .name")
          runtime=$(echo "$json" | jq -r ".devices | to_entries[].value[] | select(.udid==\"$udid\") | .runtime")

          echo "Picked device: $name ($runtime) â€” $udid"
          echo "sim_id=$udid" >> "$GITHUB_OUTPUT"

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-


      - name: Build & Test (Simulator)
        run: |
          set -o pipefail
          xcodebuild \
            -project RickMortyLLM.xcodeproj \
            -scheme RickMortyLLM \
            -destination "id=${{ steps.pick.outputs.sim_id }}" \
            -derivedDataPath DerivedData \
            -skipPackagePluginValidation \
            -parallel-testing-enabled YES \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            clean test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults.xcresult
          path: TestResults.xcresult
