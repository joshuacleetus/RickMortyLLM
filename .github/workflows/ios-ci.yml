name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Show available destinations (debug)
        shell: bash
        run: xcodebuild -project RickMortyLLM.xcodeproj -scheme RickMortyLLM -showdestinations || true

      # Pick a REAL iOS Simulator UDID (skip placeholders)
      - name: Pick an iOS Simulator by UDID
        id: pick
        shell: bash
        run: |
          set -e
          OUT="$(xcodebuild -project RickMortyLLM.xcodeproj -scheme RickMortyLLM -showdestinations || true)"

          # Prefer an iPhone simulator with a true UUID id
          SIM_ID="$(printf "%s\n" "$OUT" | perl -ne 'if (/platform:iOS Simulator/ && /name:iPhone/ && /id:\s*([0-9A-Fa-f-]{8}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{12})/) { print "$1\n"; exit }')"

          # Fallback: any iOS Simulator with a UUID id
          if [ -z "$SIM_ID" ]; then
            SIM_ID="$(printf "%s\n" "$OUT" | perl -ne 'if (/platform:iOS Simulator/ && /id:\s*([0-9A-Fa-f-]{8}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{4}-[0-9A-Fa-f-]{12})/) { print "$1\n"; exit }')"
          fi

          if [ -z "$SIM_ID" ]; then
            echo "No usable iOS Simulator UDID found in -showdestinations output:"
            echo "$OUT"
            exit 1
          fi

          echo "Picked simulator id: $SIM_ID"
          echo "sim_id=$SIM_ID" >> "$GITHUB_OUTPUT"

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ~/.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: ${{ runner.os }}-spm-

      # OPTIONAL: only if you don't commit generated Apollo code
      # - name: Generate GraphQL
      #   if: ${{ hashFiles('apollo-codegen-config.json') != '' }}
      #   run: |
      #     chmod +x ./apollo-ios-cli || true
      #     ./apollo-ios-cli fetch-schema || true
      #     ./apollo-ios-cli generate || true

      # Run ONLY unit tests (skip UI test bundles that are flaky on CI)
      - name: Build & Test (unit tests only)
        shell: bash
        env:
          CI: "1"
        run: |
          set -eo pipefail
          DEST="id=${{ steps.pick.outputs.sim_id }}"
          echo "Using destination: $DEST"
          xcodebuild -project RickMortyLLM.xcodeproj -scheme RickMortyLLM -destination "$DEST" -derivedDataPath DerivedData -skipPackagePluginValidation -parallel-testing-enabled YES -enableCodeCoverage YES -resultBundlePath TestResults.xcresult clean test -only-testing:RickMortyLLMTests

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: TestResults.xcresult
          path: TestResults.xcresult
